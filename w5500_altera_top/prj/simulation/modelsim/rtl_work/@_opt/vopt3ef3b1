library verilog;
use verilog.vl_types.all;
entity ini_socket is
    generic(
        SN_DIP          : vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1);
        SN_DPORT        : vl_logic_vector(0 to 15) := (Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0);
        SN_DSHAR        : vl_logic_vector(0 to 47) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi0);
        SN_PORT         : vl_logic_vector(0 to 15) := (Hi0, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0);
        IDLE            : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        WRMR_CMD        : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi1);
        WR_MR           : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi0, Hi1, Hi0);
        WRIR_CMD        : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        WR_IR           : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi0);
        WRIMR_CMD       : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi1, Hi0, Hi1);
        WR_IMR          : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi1, Hi1, Hi0);
        WRPORT_CMD      : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi0, Hi1, Hi1, Hi1);
        WR_PORT         : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi0);
        WRDHAR_CMD      : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi0, Hi0, Hi1);
        WR_DHAR         : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi0, Hi1, Hi0);
        WRDIPR_CMD      : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi0, Hi1, Hi1);
        WR_DIPR         : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi0);
        WRDPORT_CMD     : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi1, Hi0, Hi1);
        WR_DPORT        : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi0);
        WRMSSR_CMD      : vl_logic_vector(0 to 5) := (Hi0, Hi0, Hi1, Hi1, Hi1, Hi1);
        WR_MSSR         : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi0, Hi0, Hi0);
        WRRXBUFSIZE_CMD : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi0, Hi0, Hi1);
        WR_RXBUFSIZE    : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi0, Hi1, Hi0);
        WRTXBUFSIZE_CMD : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi0, Hi1, Hi1);
        WR_TXBUFSIZE    : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi1, Hi0, Hi0);
        WRCR_CMD        : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi1, Hi0, Hi1);
        WR_CR           : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi1, Hi1, Hi0);
        RDSR_CMD        : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi0, Hi1, Hi1, Hi1);
        RD_SR           : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi1, Hi0, Hi0, Hi0);
        JDSR            : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi1, Hi0, Hi0, Hi1);
        \END\           : vl_logic_vector(0 to 5) := (Hi0, Hi1, Hi1, Hi0, Hi1, Hi0)
    );
    port(
        clk             : in     vl_logic;
        rst_n           : in     vl_logic;
        ini_en          : in     vl_logic;
        rdreq           : in     vl_logic;
        den             : in     vl_logic;
        din             : in     vl_logic_vector(7 downto 0);
        wrend           : in     vl_logic;
        o_start         : out    vl_logic;
        o_cmd           : out    vl_logic_vector(7 downto 0);
        o_addr          : out    vl_logic_vector(15 downto 0);
        o_length        : out    vl_logic_vector(15 downto 0);
        o_dat           : out    vl_logic_vector(7 downto 0);
        o_ini_end       : out    vl_logic;
        o_ts            : out    vl_logic
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of SN_DIP : constant is 1;
    attribute mti_svvh_generic_type of SN_DPORT : constant is 1;
    attribute mti_svvh_generic_type of SN_DSHAR : constant is 1;
    attribute mti_svvh_generic_type of SN_PORT : constant is 1;
    attribute mti_svvh_generic_type of IDLE : constant is 1;
    attribute mti_svvh_generic_type of WRMR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_MR : constant is 1;
    attribute mti_svvh_generic_type of WRIR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_IR : constant is 1;
    attribute mti_svvh_generic_type of WRIMR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_IMR : constant is 1;
    attribute mti_svvh_generic_type of WRPORT_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_PORT : constant is 1;
    attribute mti_svvh_generic_type of WRDHAR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_DHAR : constant is 1;
    attribute mti_svvh_generic_type of WRDIPR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_DIPR : constant is 1;
    attribute mti_svvh_generic_type of WRDPORT_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_DPORT : constant is 1;
    attribute mti_svvh_generic_type of WRMSSR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_MSSR : constant is 1;
    attribute mti_svvh_generic_type of WRRXBUFSIZE_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_RXBUFSIZE : constant is 1;
    attribute mti_svvh_generic_type of WRTXBUFSIZE_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_TXBUFSIZE : constant is 1;
    attribute mti_svvh_generic_type of WRCR_CMD : constant is 1;
    attribute mti_svvh_generic_type of WR_CR : constant is 1;
    attribute mti_svvh_generic_type of RDSR_CMD : constant is 1;
    attribute mti_svvh_generic_type of RD_SR : constant is 1;
    attribute mti_svvh_generic_type of JDSR : constant is 1;
    attribute mti_svvh_generic_type of \END\ : constant is 1;
end ini_socket;
